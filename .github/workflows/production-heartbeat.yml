name: production-heartbeat
on:
  workflow_dispatch: # As per documentation, the colon is necessary even though no config is required.
  schedule:
    # Cron syntax is "minute[0-59] hour[0-23] date[1-31] month[1-12] day[0-6]". '*' is 'any value', and multiple values
    # can be specified with comma-separated lists. All times are UTC.
    # So this expression means "run at 45 minutes past 1, 5, and 9 AM/PM UTC". The hours were chosen so employees on
    # US Central Time will start their day with results that are <2 hrs old.
    - cron: '45 1,5,9,13,17,21 * * *'
jobs:
  production-heartbeat:
    strategy:
      # By default, if any job in a matrix fails, all other jobs are immediately cancelled. This makes the jobs run to completion instead.
      fail-fast: false
      matrix:
        os: [{vm: ubuntu-latest, exe: .sh}, {vm: windows-2019, exe: .cmd}]
        node: ['lts/*']
    runs-on: ${{ matrix.os.vm }}
    timeout-minutes: 60
    steps:
      # === Setup. We need to get the code, set up nodejs, and create the results directory. ===
      - uses: actions/checkout@v2
        with:
          ref: 'release'
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - run: mkdir smoke-test-results

      # === Report any problems ===
      - name: Report problems
        # There are problems if any step failed or was skipped, or if any step that can make retry attempts was forced to
        # do so.
        # Note that the `join()` call omits null values, so if any steps were skipped, they won't have a corresponding
        # value in the string.
        if: ${{ failure() || cancelled() || (join(steps.*.outputs.retry_count) != '0,0') }}
        shell: bash
        env:
          # A link to this run, so the PagerDuty assignee can quickly get here.
          RUN_LINK: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          # Define a helper function to create our POST request's data, to sidestep issues with nested quotations.
          generate_post_data() {
          # This is known as a HereDoc, and it lets us declare multi-line input ending when the specified limit string,
          # in this case EOF, is encoutered.
          cat <<EOF
          {"payload": {
            "summary": "Hardcoded test alert",
            "source": "Github Actions",
            "severity": "info",
            "custom_details": "This is irrelevant"
          },
          "links": [{
            "href": "${{ env.RUN_LINK }}",
            "text": "Link to action execution"
          }],
          "event_action": "trigger",
          "dedup_key": "GH-HB-${{ matrix.os.vm }}-${{ matrix.node }}",
          "routing_key": "${{ secrets.PAGERDUTY_HEARTBEAT_KEY }}"
          }
          EOF
          }
          # Make our POST request
          curl --request POST --data "$(generate_post_data)" https://events.pagerduty.com/v2/enqueue
