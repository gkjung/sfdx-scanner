# Javascript Node CircleCI configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/openjdk:11.0.2-jdk-node

orbs:
  win: circleci/windows@2.2.0 # The Windows orb give you everything you need to start using the Windows executor.
  gradle: circleci/gradle@2.2.0
  node: circleci/node@4.5.1
  release-management: salesforce/npm-release-management@4


commands:
  # Purpose: Checkout the code from github
  auth_and_checkout:
    steps:
      - add_ssh_keys:
          fingerprints:
            # CircleCI deploy key (read/write), allows CircleCI to checkout code from Github.
            - "0e:88:a5:7f:1c:d7:87:50:e2:69:65:77:94:c9:7f:e5"
      - checkout

  # Purpose: Update node to either LTS or Current version.
  update_node:
    parameters:
      os:
        default: linux
        description: The OS being tested against
        enum:
          - linux
          - windows
        type: enum
      lts:
        description: Should the LTS version of node be installed. If false, Current will be installed instead.
        type: boolean
        default: true
    steps:
      # For Linux, we can just use the node orb.
      - when:
          condition:
            equal:
              - linux
              - << parameters.os >>
          steps:
            - node/install:
                install-npm: false
                lts: << parameters.lts >>
      # For Windows, we need to use a custom bash script.
      - when:
          condition:
            equal:
              - windows
              - << parameters.os >>
          steps:
            - run:
                name: "Install node"
                # This script must explicitly be run in bash.
                shell: bash.exe
                command: |
                  NODE_ALIAS=$(if << parameters.lts >>; then echo lts; else echo current; fi)
                  .circleci/windows-node-upgrade.sh ${NODE_ALIAS}

            # After upgrading the node version in a Windows executor, we have to manually reinstall Yarn if we want to use it.
            - run:
                name: "Install Yarn"
                shell: bash.exe
                command: npm install -g yarn
      # Regardless of OS, we want to log the version of Node we're using post-upgrade.
      - run: node -v

  # Purpose: Performs all of the follow-up actions after unit tests are executed. E.g., storing results and artifacts.
  process_unit_test_results:
    steps:
      # Store test results and artifacts
      - gradle/collect_test_results:
          reports_path: pmd-cataloger/build/reports/
          test_results_path: pmd-cataloger/build/test-results/
      - store_test_results:
          path: test-results
      - store_artifacts: # upload nyc test coverage as artifact.
          path: test-coverage
      - store_artifacts: # upload jacoco coverage of pmd-cataloger as artifact
          path: pmd-cataloger/build/reports/jacoco/test

  # Purpose: Install SFDX, and the locally-built tarball of the plugin.
  install_local_tarball:
    parameters:
      shell:
        description: The shell executable to use
        type: string
      dir-uri:
        description: The directory for the local install
        type: string
    steps:
      - run:
          name: "Install SFDX and tarball"
          shell: << parameters.shell >>
          command: |
            npm install -g sfdx-cli
            # We need to determine the name of the tarball
            SFDC_TARBALL=$(ls | grep salesforce-sfdx-scanner-[0-9]*\\.[0-9]*\\.[0-9]*\\.tgz)
            # We also ought to determine where we are, using the parameter
            DIR=<< parameters.dir-uri >>
            # Pipe in a 'y' to simulate agreeing to isntall an unsigned plugin. Use a URI of the file's full path.
            echo y | sfdx plugins:install "file://${DIR}/${SFDC_TARBALL}"

  # Purpose: Install SFDX, and the release candidate version of the plugin.
  install_release_candidate:
    steps:
      - run:
          name: "Install SFDX cli"
          command: npm install -g sfdx-cli

      - run:
          name: "Install release candidate"
          command: sfdx plugins:install @salesforce/sfdx-scanner@latest-rc

      - run:
          name: "Log installed plugins"
          command: sfdx plugins
jobs:
  # Purpose: Performs all of the necessary setup for subsequent jobs to work. In general, all workflows should probably
  # start with this job.
  setup:
    <<: *defaults
    steps:
      - auth_and_checkout

      # We'll want to use the LTS version of node.
      - update_node:
          os: linux

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # Do the necessary build steps for running unit tests
      - run: yarn --ignore-scripts
      - run: yarn build

      # Do the necessary build steps for running tarball tests
      - run: npm pack

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - persist_to_workspace:
          root: ~/repo
          paths: .

  # Purpose: Runs the unit tests in a Linux environment.
  linux-unit-tests:
    <<: *defaults
    parameters:
      node-version: &node_version_param # Define an anchor here, since we'll want to use this parameter again elsewhere.
        # While we could technically use a boolean here, we're using an enum instead. We do this because the value of
        # the parameter is appended to jobs created by a matrix, and a job ending in "-lts" is more meaningful than a job
        # ending in "-true".
        type: enum
        enum:
          - lts
          - current
        default: lts
        description: Which version of node should be used.
    steps:
      - attach_workspace:
          at: ~/repo

      # Install the appropriate version of node. This job's parameter was an enum, and the command accepts a boolean.
      # Therefore, these complementary `when` clauses are needed.
      - when:
          condition:
            equal:
              - lts
              - << parameters.node-version >>
          steps:
            - update_node:
                os: linux
                lts: true
      - when:
          condition:
            equal:
              - current
              - << parameters.node-version >>
          steps:
            - update_node:
                os: linux
                lts: false


      # Unit tests
      - run:
          name: test
          command: yarn test --reporter mocha-junit-reporter --reporter-option mochaFile=test-results/mocha/test-results.xml
          when: always

      # Linting
      # NOTE: This step is temporarily disabled, until we can upgrade the versions of eslint and its plugins that we use.
#      - run:
#          name: eslint
#          command: yarn lint --format junit --output-file test-results/eslint/eslint.xml
#          when: always

      - process_unit_test_results

  # Purpose: Runs the unit tests in a Windows environment.
  windows-unit-tests:
    executor:
      name: win/default # executor type
      size: "medium"
      shell: bash.exe
    parameters:
      node-version: *node_version_param
    working_directory: C:\repo
    steps:
      - attach_workspace:
          at: C:\repo

      # Install the appropriate version of node. This job's parameter was an enum, and the command accepts a boolean.
      # Therefore, these complementary `when` clauses are needed.
      - when:
          condition:
            equal:
              - lts
              - << parameters.node-version >>
          steps:
            - update_node:
                os: windows
                lts: true
      - when:
          condition:
            equal:
              - current
              - << parameters.node-version >>
          steps:
            - update_node:
                os: windows
                lts: false

      # The `setup` job is in a Unix environment. Calling `yarn` in that context adds bash files to `node_modules/.bin`,
      # but Windows also requires `.cmd` files. So we re-run `yarn` here before running our tests.
      # NOTE: This is only required for the Windows unit tests, not the tarball test, because the latter already has
      # everything it needs in the tarball.
      - run: yarn --ignore-scripts

      - run: mkdir test-results

      # Unit tests
      - run:
          name: test
          # Necessary to explicitly use bash, otherwise gradlew's status code won't be received and the job will hang.
          shell: bash.exe
          command: yarn test --reporter mocha-junit-reporter --reporter-option mochaFile=test-results/mocha/test-results.xml
          when: always

      # Linting
      # NOTE: This step is temporarily disabled, until we can upgrade the versions of eslint and its plugins that we use.
#      - run:
#          name: eslint
#          command: yarn lint --format junit --output-file test-results/eslint/eslint.xml
#          shell: bash.exe
#          when: always

      - process_unit_test_results

  # Purpose: Runs the plugin against itself, to make sure we're following our own rules.
  self-evaluation:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - run: mkdir test-results
      # NOTE: These steps are temporarily disabled, until we can upgrade the versions of eslint and its plugins that we use.
#      - run:
#          name: "self-evaluate"
#          command: |
#            bin/run scanner:run --target ./src --format junit --outfile ./test-results/src.xml --violations-cause-error
#          # TODO: We'll also need to make it scan the pmd-cataloger folder once we have an easy way of making it target Java.
#          # bin/run scanner:run --target ./pmd-cataloger --format junit --outfile ./test-results/pmd-cataloger.xml --violations-cause-error
#
#      - store_test_results:
#          path: test-results
#
#      - store_artifacts:
#          path: test-results

  # Purpose: In a Linux environment, install the locally-built tarball and run the smoke test script against it.
  # This helps ensure the overall stability of the plugin prior to publishing.
  linux-tarball-test:
    <<: *defaults
    parameters:
      node-version: *node_version_param
    steps:
      - attach_workspace:
          at: ~/repo

      # Install the appropriate version of node. This job's parameter was an enum, and the command accepts a boolean.
      # Therefore, these complementary `when` clauses are needed.
      - when:
          condition:
            equal:
              - lts
              - << parameters.node-version >>
          steps:
            - update_node:
                os: linux
                lts: true
      - when:
          condition:
            equal:
              - current
              - << parameters.node-version >>
          steps:
            - update_node:
                os: linux
                lts: false

      # Set up the plugin
      - install_local_tarball:
          dir-uri: "$(pwd)"
          # This is the default Linux bash shell.
          shell: "#/bin/bash -eo pipefail"

      # Run through the smoke test script. If everything passes, we can assume that the plugin is stable.
      - run:
          name: "smoke test"
          command: smoke-tests/smoke-test.sh sfdx

      # Since the results are expected to be non-null, upload them as an artifact to avoid tanking the tests.
      - store_artifacts:
          path: smoke-test-results

  # Purpose: In a Windows environment, install the locally-built tarball and run the smoke test script against it.
  # This helps ensure the overall stability of the plugin prior to publishing.
  windows-tarball-test:
    executor:
      name: win/default # executor type
      size: "medium"
    parameters:
      node-version: *node_version_param
    working_directory: C:\repo
    steps:
      # Commands are run in a Windows VM environment
      - attach_workspace:
          at: C:\repo

      # Install the appropriate version of node. This job's parameter was an enum, and the command accepts a boolean.
      # Therefore, these complementary `when` clauses are needed.
      - when:
          condition:
            equal:
              - lts
              - << parameters.node-version >>
          steps:
            - update_node:
                os: windows
                lts: true
      - when:
          condition:
            equal:
              - current
              - << parameters.node-version >>
          steps:
            - update_node:
                os: windows
                lts: false

      # Set up the plugin
      - install_local_tarball:
          # Note that the URI we provide does NOT start with `C:`.
          dir-uri: "/repo"
          # This script needs to be run with bash, or it won't work.
          shell: bash.exe

      # Run through the smoke test script. If everything passes, we can assume that the plugin is stable.
      - run:
          name: "smoke test"
          command: smoke-tests\smoke-test.cmd sfdx

      # Since the results are expected to be non-null, upload them as an artifact to avoid tanking the tests.
      - store_artifacts:
          path: smoke-test-results

  # Purpose: Validate that this branch meets all of the criteria for an acceptable publishing candidate.
  validate-candidate-branch:
    <<: *defaults
    steps:
      - auth_and_checkout
      - run: .circleci/validate-candidate-branch.sh ${CIRCLE_BRANCH}

  # Purpose: In a Linux environment, install the published version of the plugin whose tag is `latest-rc`, then run the
  # smoke test script against it. This helps ensure the overall stability of a release candidate, so we can confidently
  # promote it to an actual release.
  linux-rc-test:
    <<: *defaults
    steps:
      - auth_and_checkout

      # We want our unit tests to run with the lts version of node.
      - update_node:
          os: linux

      # Prepare the release candidate for running.
      - install_release_candidate

      - run:
          # Run through our sanity test script against the installed version of the plugin. If all of these pass, we can
          # assume that the plugin is stable.
          name: "Packaged sanity test"
          command: smoke-tests/smoke-test.sh sfdx

      # Upload an artifact for the results, so they're visible without failing the tests
      - store_artifacts:
          path: smoke-test-results

  # Purpose: In a Windows environment, install the published version of the plugin whose tag is `latest-rc`, then run the
  # smoke test script against it. This helps ensure the overall stability of a release candidate, so we can confidently
  # promote it to an actual release.
  windows-rc-test:
    executor:
      name: win/default # executor type
      size: "medium"
    working_directory: C:\repo

    steps:
      - run:
          # The read/write ssh key is not recognized by windows. Use https clone to avoid this issue
          name: checkout-branch
          shell: bash.exe
          command: git clone "https://github.com/forcedotcom/sfdx-scanner.git" --branch "$CIRCLE_BRANCH" .

      # We want to run against the LTS version of node
      - update_node:
          os: windows

      # Prepare the release candidate for running.
      - install_release_candidate

      - run:
          # Run through our sanity test script against the installed version of the plugin. If all of these pass, we can
          # assume that the plugin is stable.
          name: "Packaged sanity test"
          command: smoke-tests\smoke-test.cmd sfdx

      # Upload an artifact for the results, so they're visible without failing the tests
      - store_artifacts:
          path: smoke-test-results

workflows:
  version: 2.1
  # Purpose: Run unit tests and smoke tests against a branch.
  # Triggered by: Pull requests from any branch whose name is NOT `v2-X-Y` where X and Y are numbers.
  test:
    jobs:
      # Step 1: Set up the test environment.
      - setup:
          filters: &testing_filters # Declare these filters as an anchor so we can reuse them.
            branches:
              ignore: /^v2-\d+-\d+$/
      # Step 2: Run the tests. Linux and Windows each have unit tests and a tarball test, and we also do a self-evaluation
      # step in Linux.
      - linux-unit-tests:
          filters:
            <<: *testing_filters
          requires:
            - setup
      - windows-unit-tests:
          filters:
            <<: *testing_filters
          requires:
            - setup
      - linux-tarball-test:
          filters:
            <<: *testing_filters
          requires:
            - setup
      - windows-tarball-test:
          filters:
            <<: *testing_filters
          requires:
            - setup
      - self-evaluation:
          filters:
            <<: *testing_filters
          requires:
            - setup
  # Purpose: Publish a release based off of the specified branch.
  # Triggered by: Pushes to branches that match the format `v2-X-Y` where X and Y are numbers.
  publish:
    jobs:
      # Step 1: Validate that the branch is an acceptable candidate for publishing.
      - validate-candidate-branch:
          filters: &publishing_filters # Declare these filters as an anchor so we can reuse them.
            branches:
              only: /^v2-\d+-\d+$/
      # Step 2: Publish the branch as a release candidate.
      - release-management/release-package:
          requires:
            - validate-candidate-branch
          sign: true
          github-release: true
          tag: latest-rc
          filters:
            <<: *publishing_filters
          context: AWS
      # Step 3: Smoke test the release candidate on both Linux and Windows.
      - linux-rc-test:
          requires:
            - release-management/release-package
          filters:
            <<: *publishing_filters
      - windows-rc-test:
          requires:
            - release-management/release-package
          filters:
            <<: *publishing_filters
      # Step 4: Promote the release candidate to a full release.
      - release-management/promote-package:
          candidate: latest-rc
          target: latest
          requires:
            - linux-rc-test
            - windows-rc-test
          filters:
            <<: *publishing_filters
  # Purpose: Run the tarball and unit tests on Linux and Windows, against the LTS and Current versions of node.
  # Triggered by: Nothing. Runs automatically on a daily cadence.
  daily-smoke-test:
    triggers:
      - schedule:
          # Cron syntax is "minute[0-59] hour[0-23] date[1-31] month[1-12] day[0-6]". '*' is 'any value', and multiple
          # values can be specified with a comma-separated list. All times are UTC.
          # So this expression means to run at 13:30 UTC every day. This time was chosen because it corresponds to
          # 8:30AM CDT, meaning that any issues will be surfaced before start of business.
          cron: "30 13 * * *"
          filters:
            branches:
              # Having this run against all branches would be bedlam, so we'll have it run just against dev, and dev-3,
              # the branch we're using for our pilot features.
              only:
                - "dev"
                - "dev-3"
    jobs:
      # Step 1: Run the setup task to create the testing environment.
      - setup
      # Step 2: Create matrices for the unit test and tarball jobs to run with both LTS and Current node.
      - linux-unit-tests:
          requires:
            - setup
          matrix:
            # The values of the parameters will be appended to the jobs they create.
            # So we'll get "linux-unit-tests-lts" and "linux-unit-tests-current"
            parameters:
              node-version: [lts, current]
      - windows-unit-tests:
          requires:
            - setup
          matrix:
            # The values of the parameters will be appended to the jobs they create.
            # So we'll get "windows-unit-tests-lts" and "windows-unit-tests-current"
            parameters:
              node-version: [lts, current]
      - linux-tarball-test:
          requires:
            - setup
          matrix:
            # The values of the parameters will be appended to the jobs they create.
            # So we'll get "linux-tarball-test-lts" and "linux-tarball-test-current"
            parameters:
              node-version: [lts, current]
      - windows-tarball-test:
          requires:
            - setup
          matrix:
            parameters:
              # The values of the parameters will be appended to the jobs they create.
              # So we'll get "windows-tarball-test-lts" and "windows-tarball-test-current"
              node-version: [lts, current]

